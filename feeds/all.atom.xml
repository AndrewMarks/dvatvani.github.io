<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dinesh Vatvani</title><link href="http://dvatvani.github.io/" rel="alternate"></link><link href="http://dvatvani.github.io/feeds/all.atom.xml" rel="self"></link><id>http://dvatvani.github.io/</id><updated>2017-04-18T01:15:00+01:00</updated><entry><title>Analysing the music I listen to</title><link href="http://dvatvani.github.io/analysing-the-muisc-i-listen-to.html" rel="alternate"></link><updated>2017-04-18T01:15:00+01:00</updated><author><name>Dinesh Vatvani</name></author><id>tag:dvatvani.github.io,2017-04-18:analysing-the-muisc-i-listen-to.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been tracking the music I listen to since 2012 through last.fm. They offer a free account and you can install &amp;#8220;scrobbler&amp;#8221; plugins on different systems used to listen to music to allow you to track the music you listen to. Spotify natively supports last.fm scrobbling too and there are scrobblers that work well with Android devices too (I suspect the same is also true for iOS, but I don&amp;#8217;t have first hand experience of&amp;nbsp;it). &lt;/p&gt;
&lt;p&gt;Last.fm offer some &lt;a href="https://www.last.fm/user/thehuntinghawk/listening-report/year"&gt;summary stats&lt;/a&gt;, and they can be quite interesting to look at but I felt like a lot more could be done with the data collected, so I decided to analyse the data&amp;nbsp;myself. &lt;/p&gt;
&lt;p&gt;The data for the analysis was collected using the &lt;a href="http://www.last.fm/api"&gt;last.fm &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; and analysed using Python in Jupyter Notebooks. The analysis is heavily inspired by &lt;a href="http://geoffboeing.com/2016/05/analyzing-lastfm-history/"&gt;this blog post from Geoff Boeing&lt;/a&gt;. In fact, a lot of the analysis builds on top of work he has done. The code used for the analysis can be found in the form of Jupyter notebooks over &lt;a href="http://nbviewer.jupyter.org/github/dvatvani/dvatvani.github.io/tree/master/static/last-fm/"&gt;here&lt;/a&gt;. The analysis can be easily run using your own last.fm data. All you need is an &lt;span class="caps"&gt;API&lt;/span&gt; key for&amp;nbsp;last.fm. &lt;/p&gt;
&lt;p&gt;The data analysed contains 13,446 scrobbles containing 3,908 unique tracks and 522 unique artists. The data analysed is mainly from last.fm, but some additional data about artists, albums and tracks was obtained from &lt;a href="https://musicbrainz.org/"&gt;musicbrainz&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s start the analysis with some of the usual suspects&amp;#8230; Here are the most played artists, albums and tracks in my music&amp;nbsp;history.&lt;/p&gt;
&lt;p&gt;&lt;img alt="top artists" src="http://dvatvani.github.io/static/last-fm/lastfm-artists-played-most-h.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="top albums" src="http://dvatvani.github.io/static/last-fm/lastfm-albums-played-most-h.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="top tracks" src="http://dvatvani.github.io/static/last-fm/lastfm-tracks-played-most-h.png" /&gt;&lt;/p&gt;
&lt;p&gt;All of the above lists are indicative of my taste in music (or lack thereof, depending on your perspective!), but another interesting aspect to consider is the level of breadth of exploration for each artist i.e. how many unique different tracks from the artist I&amp;#8217;ve listended&amp;nbsp;to. &lt;/p&gt;
&lt;p&gt;&lt;img alt="artist exploration breadth" src="http://dvatvani.github.io/static/last-fm/lastfm-uniqe-tracks-played-per-artist-most-h.png" /&gt;&lt;/p&gt;
&lt;p&gt;The genre descriptions on last fm for the artists I listen to can also be a useful indicator of the genre distribution of the music I listen&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;&lt;img alt="genre distribution" src="http://dvatvani.github.io/static/last-fm/lastfm-genres.png" /&gt;&lt;/p&gt;
&lt;p&gt;&amp;#8230;as can the year of release of the tracks I listen&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;&lt;img alt="release year distribution" src="http://dvatvani.github.io/static/last-fm/lastfm-songs-release-year.png" /&gt;&lt;/p&gt;
&lt;p&gt;This suggests that most of the music I listen to was made after I was born! It&amp;#8217;s worth noting, however, that there the year of release is not available for all tracks in my music history. Some of the data is missing for the more recent years (which is why the plot stops at 2015) and some of the data is also missing for some older tracks in my music played dataset (e.g. The Who and The Beatles), so it is difficult to gauge just how skewed the music I listen to is to music made in the last 3&amp;nbsp;decades.&lt;/p&gt;
&lt;p&gt;Most of the analysis above explores the music I tend to listen to but not how/when I tend to listen to it. I think a lot can be leart about oneself by examining behavioural patterns that aren&amp;#8217;t often examined, so below is some examination of patterns in how I listen to&amp;nbsp;music.&lt;/p&gt;
&lt;p&gt;We can look at how the amount of music I listen to has evolved over&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;&lt;img alt="scrobbles timeseries" src="http://dvatvani.github.io/static/last-fm/lastfm-songs-played-timeseries.png" /&gt;&lt;/p&gt;
&lt;p&gt;And look at relative play counts in a calendar view to obtain an intuitive sense for how much daily variation&amp;nbsp;exists.&lt;/p&gt;
&lt;p&gt;&lt;img alt="activity calendar" src="/static/last-fm/lastfm-activity-calendar-view.png" /&gt;&lt;/p&gt;
&lt;p&gt;The breakdown of how much music I listen to by day of week and hour can also be very&amp;nbsp;informative.&lt;/p&gt;
&lt;p&gt;&lt;img alt="scrobbles by hour and day of week" src="http://dvatvani.github.io/static/last-fm/lastfm-scrobbles-days-hours.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="scrobbles by hour" src="http://dvatvani.github.io/static/last-fm/lastfm-scrobbles-per-hour.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="scrobbles by day of week" src="http://dvatvani.github.io/static/last-fm/lastfm-scrobbles-per-weekday.png" /&gt;&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a lot that be inferred about my lifestyle from the plots above. I listen to music a lot around 10 am on weekdays (on my commute to work) and have a fairly erratic sleeping pattern. There isn&amp;#8217;t a day of week and time of day during which I haven&amp;#8217;t, at some point, been listening to&amp;nbsp;music!&lt;/p&gt;
&lt;p&gt;Observing patterns in when I listen to new artists can also be&amp;nbsp;insightful&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;img alt="new artist and track timeseries" src="http://dvatvani.github.io/static/last-fm/lastfm-new-artists-and-tracks-timeseries.png" /&gt;&lt;/p&gt;
&lt;p&gt;&amp;#8230;as can observing when I listen to my most played&amp;nbsp;artists.&lt;/p&gt;
&lt;p&gt;&lt;img alt="timeseries for top artists" src="http://dvatvani.github.io/static/last-fm/lastfm-scrobbles-top-artists-years.png" /&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m clearly prone to binge listening to my favourite artists. I can listen to 300 or 400 songs from a single band in a span of a couple of weeks. Given the nature of music and how it&amp;#8217;s released in albums, it lends itself naturally to music from a given artist being heard in groups of around 12-15 tracks, but my music history suggests that I have a habit of binge listening to artists beyond the scope of what can be reasonably explained by listening to one or even two albums from the band in a couple of&amp;nbsp;weeks.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a lot more that can be done with this data, and I may return to it in the future, but I&amp;#8217;ve found analysing my music listnening history very interesting and more insightful than I was&amp;nbsp;expecting. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you have any other ideas about what might be interesting to do with this dataset, let me know in the comments. The Jupyter notebook that was used to generate all the plots in this blog post can be found &lt;a href="http://nbviewer.jupyter.org/github/dvatvani/dvatvani.github.io/tree/master/static/last-fm/"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</summary><category term="Python"></category><category term="Music"></category><category term="QS"></category></entry><entry><title>TV show episode ratings</title><link href="http://dvatvani.github.io/tv-show-episode-ratings.html" rel="alternate"></link><updated>2016-05-28T22:00:00+01:00</updated><author><name>Dinesh Vatvani</name></author><id>tag:dvatvani.github.io,2016-05-28:tv-show-episode-ratings.html</id><summary type="html">&lt;p&gt;This post is about a simple visualisation of the episode ratings of &lt;span class="caps"&gt;TV&lt;/span&gt; shows. The idea behind this is heavily borrowed from &lt;a href="http://graphtv.kevinformatics.com/"&gt;Graph &lt;span class="caps"&gt;TV&lt;/span&gt;&lt;/a&gt;. I use that site often and really like it, but the plots it generates are based on &lt;a href="http://www.imdb.com/"&gt;IMDb&lt;/a&gt; rating data. I&amp;#8217;ve always wanted something similar but using &lt;a href="https://trakt.tv/"&gt;Trakt.tv&lt;/a&gt; rating data instead, so I decided to write a script to do just&amp;nbsp;that. &lt;/p&gt;
&lt;p&gt;Below are the episode ratings for the top 10 most popular shows, according to Trakt.tv. The plots are interactive. You can hover over a point to get more information on the episode or pan/zoom on the data using the tools on the bottom left of each&amp;nbsp;plot. &lt;/p&gt;
&lt;p&gt;I will likely create a small web app to make it easier to generate the plots online for any tv show at some stage in the future, but if anyone is interested in generating similar plots for other shows now, the Python code to generate the plots is available &lt;a href="https://github.com/dvatvani/trakt-ratings-trends"&gt;here on GitHub&lt;/a&gt;. A Jupyter notebook with the code can also be found &lt;a href="http://nbviewer.jupyter.org/github/dvatvani/trakt-ratings-trends/blob/master/trakt-ratings-trends.ipynb"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;style&gt;

table
{
  border-collapse: collapse;
  width: 300px;
}
th
{
  color: #ffffff;
  background-color: #000000;
}
td
{
  background-color: #cccccc;
}
table, th, td
{
  font-family:Arial, Helvetica, sans-serif;
  border: 1px solid black;
  text-align: right;
}

&lt;/style&gt;

&lt;div id="fig_el43921586921842571185746"&gt;&lt;/div&gt;

&lt;script type="text/javascript" src="http://dvatvani.github.io/static/tv-show-episode-ratings/game_of_thrones.js"&gt;&lt;/script&gt;

&lt;style&gt;

table
{
  border-collapse: collapse;
  width: 300px;
}
th
{
  color: #ffffff;
  background-color: #000000;
}
td
{
  background-color: #cccccc;
}
table, th, td
{
  font-family:Arial, Helvetica, sans-serif;
  border: 1px solid black;
  text-align: right;
}

&lt;/style&gt;

&lt;div id="fig_el43921951669525390596189"&gt;&lt;/div&gt;

&lt;script type="text/javascript" src="http://dvatvani.github.io/static/tv-show-episode-ratings/breaking_bad.js"&gt;&lt;/script&gt;

&lt;style&gt;

table
{
  border-collapse: collapse;
  width: 300px;
}
th
{
  color: #ffffff;
  background-color: #000000;
}
td
{
  background-color: #cccccc;
}
table, th, td
{
  font-family:Arial, Helvetica, sans-serif;
  border: 1px solid black;
  text-align: right;
}

&lt;/style&gt;

&lt;div id="fig_el43921573256326407222326"&gt;&lt;/div&gt;

&lt;script type="text/javascript" src="http://dvatvani.github.io/static/tv-show-episode-ratings/the_big_bang_theory.js"&gt;&lt;/script&gt;

&lt;style&gt;

table
{
  border-collapse: collapse;
  width: 300px;
}
th
{
  color: #ffffff;
  background-color: #000000;
}
td
{
  background-color: #cccccc;
}
table, th, td
{
  font-family:Arial, Helvetica, sans-serif;
  border: 1px solid black;
  text-align: right;
}

&lt;/style&gt;

&lt;div id="fig_el43922826681681423509412"&gt;&lt;/div&gt;

&lt;script type="text/javascript" src="http://dvatvani.github.io/static/tv-show-episode-ratings/the_walking_dead.js"&gt;&lt;/script&gt;

&lt;style&gt;

table
{
  border-collapse: collapse;
  width: 300px;
}
th
{
  color: #ffffff;
  background-color: #000000;
}
td
{
  background-color: #cccccc;
}
table, th, td
{
  font-family:Arial, Helvetica, sans-serif;
  border: 1px solid black;
  text-align: right;
}

&lt;/style&gt;

&lt;div id="fig_el43921932024407192895674"&gt;&lt;/div&gt;

&lt;script type="text/javascript" src="http://dvatvani.github.io/static/tv-show-episode-ratings/dexter.js"&gt;&lt;/script&gt;

&lt;style&gt;

table
{
  border-collapse: collapse;
  width: 300px;
}
th
{
  color: #ffffff;
  background-color: #000000;
}
td
{
  background-color: #cccccc;
}
table, th, td
{
  font-family:Arial, Helvetica, sans-serif;
  border: 1px solid black;
  text-align: right;
}

&lt;/style&gt;

&lt;div id="fig_el43921916642569335910854"&gt;&lt;/div&gt;

&lt;script type="text/javascript" src="http://dvatvani.github.io/static/tv-show-episode-ratings/how_i_met_your_mother.js"&gt;&lt;/script&gt;

&lt;style&gt;

table
{
  border-collapse: collapse;
  width: 300px;
}
th
{
  color: #ffffff;
  background-color: #000000;
}
td
{
  background-color: #cccccc;
}
table, th, td
{
  font-family:Arial, Helvetica, sans-serif;
  border: 1px solid black;
  text-align: right;
}

&lt;/style&gt;

&lt;div id="fig_el43922452610884251329649"&gt;&lt;/div&gt;

&lt;script type="text/javascript" src="http://dvatvani.github.io/static/tv-show-episode-ratings/sherlock.js"&gt;&lt;/script&gt;

&lt;style&gt;

table
{
  border-collapse: collapse;
  width: 300px;
}
th
{
  color: #ffffff;
  background-color: #000000;
}
td
{
  background-color: #cccccc;
}
table, th, td
{
  font-family:Arial, Helvetica, sans-serif;
  border: 1px solid black;
  text-align: right;
}

&lt;/style&gt;

&lt;div id="fig_el439222331763277133446"&gt;&lt;/div&gt;

&lt;script type="text/javascript" src="http://dvatvani.github.io/static/tv-show-episode-ratings/arrow.js"&gt;&lt;/script&gt;

&lt;style&gt;

table
{
  border-collapse: collapse;
  width: 300px;
}
th
{
  color: #ffffff;
  background-color: #000000;
}
td
{
  background-color: #cccccc;
}
table, th, td
{
  font-family:Arial, Helvetica, sans-serif;
  border: 1px solid black;
  text-align: right;
}

&lt;/style&gt;

&lt;div id="fig_el43921909720324799833593"&gt;&lt;/div&gt;

&lt;script type="text/javascript" src="http://dvatvani.github.io/static/tv-show-episode-ratings/homeland.js"&gt;&lt;/script&gt;

&lt;style&gt;

table
{
  border-collapse: collapse;
  width: 300px;
}
th
{
  color: #ffffff;
  background-color: #000000;
}
td
{
  background-color: #cccccc;
}
table, th, td
{
  font-family:Arial, Helvetica, sans-serif;
  border: 1px solid black;
  text-align: right;
}

&lt;/style&gt;

&lt;div id="fig_el43921571023769423801765"&gt;&lt;/div&gt;

&lt;script type="text/javascript" src="http://dvatvani.github.io/static/tv-show-episode-ratings/friends.js"&gt;&lt;/script&gt;</summary><category term="Python"></category><category term="TV"></category></entry><entry><title>A Song of Ice and Fire : Chapter ratings</title><link href="http://dvatvani.github.io/ASOIAF-Chapter-ratings.html" rel="alternate"></link><updated>2016-04-10T23:12:00+01:00</updated><author><name>Dinesh Vatvani</name></author><id>tag:dvatvani.github.io,2016-04-10:ASOIAF-Chapter-ratings.html</id><summary type="html">&lt;p&gt;This post relates to Game of Thrones, or more specifically to the series of books the show is based on: A Song of Ice and&amp;nbsp;Fire. &lt;/p&gt;
&lt;p&gt;The website &lt;a href="http://towerofthehand.com/"&gt;Tower of the Hand&lt;/a&gt; contains ratings for each chapter in the series of books. Chapters&amp;#8217; ratings are generated by users. Each chapter has ratings from typically around 150 people so there will still be a reasonable amount of uncertainty around each chapter rating, but there is still enough information in here to give us broad ideas about the overall progression in how interesting the books are, the most interesting books and the most interesting &lt;span class="caps"&gt;POV&lt;/span&gt;&amp;nbsp;characters.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s start by having a quick overview of the progression of chapter ratings across the entire&amp;nbsp;series.&lt;/p&gt;
&lt;h1&gt;Chapter ratings in the entire&amp;nbsp;series&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Chapter ratings in all books" src="http://dvatvani.github.io/static/ASOIAF-Chapter-ratings/ASOIAF_-_all_books_-_chapter_ratings.png" /&gt;&lt;/p&gt;
&lt;p&gt;This overview suggests&amp;nbsp;that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Game of Thrones is fairly consistent in its chapter&amp;nbsp;ratings&lt;/li&gt;
&lt;li&gt;The final quarter of A Clash of Kings is comparatively&amp;nbsp;dull&lt;/li&gt;
&lt;li&gt;A Storm of Swords gets better as the book&amp;nbsp;progresses&lt;/li&gt;
&lt;li&gt;A Feast for Crows is not as good as the other books, but it gets better as the book&amp;nbsp;progresses&lt;/li&gt;
&lt;li&gt;A Dance with Dragons is the most inconsistent in terms of chapter&amp;nbsp;ratings&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Having read the books, I&amp;#8217;m inclined to agree with the overview provided by the ratings so&amp;nbsp;far.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s break the chapters down by book to have a slightly closer look at the&amp;nbsp;ratings. &lt;/p&gt;
&lt;h1&gt;Chapter ratings by&amp;nbsp;book&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Chapter ratings in AGOT" src="http://dvatvani.github.io/static/ASOIAF-Chapter-ratings/ASOIAF_-_AGOT_-_chapter_ratings.png" /&gt;
&lt;img alt="Chapter ratings in ACOK" src="http://dvatvani.github.io/static/ASOIAF-Chapter-ratings/ASOIAF_-_ACOK_-_chapter_ratings.png" /&gt;
&lt;img alt="Chapter ratings in ASOS" src="http://dvatvani.github.io/static/ASOIAF-Chapter-ratings/ASOIAF_-_ASOS_-_chapter_ratings.png" /&gt;
&lt;img alt="Chapter ratings in AFFC" src="http://dvatvani.github.io/static/ASOIAF-Chapter-ratings/ASOIAF_-_AFFC_-_chapter_ratings.png" /&gt;
&lt;img alt="Chapter ratings in ADWD" src="http://dvatvani.github.io/static/ASOIAF-Chapter-ratings/ASOIAF_-_ADWD_-_chapter_ratings.png" /&gt;&lt;/p&gt;
&lt;h1&gt;Chapter ratings by &lt;span class="caps"&gt;POV&lt;/span&gt;&amp;nbsp;character&lt;/h1&gt;
&lt;p&gt;It can be interesting to break down the chapter ratings by the point of view characters to see how the various plot lines progress in terms of maintaining reader&amp;nbsp;interest.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chapter ratings by POV character" src="http://dvatvani.github.io/static/ASOIAF-Chapter-ratings/Chapter_ratings_by_POV_character_-_all_books.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Daenerys&lt;/strong&gt; : With the exception of one strong chapter, Daenerys&amp;#8217; chapters in the final book are not very&amp;nbsp;good.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ned&lt;/strong&gt; : As we all know, he was a short lived character, but his chapters were consistently&amp;nbsp;great&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Brienne&lt;/strong&gt; : Many people complain about Brienne&amp;#8217;s chapters in &lt;code&gt;AFFC&lt;/code&gt;. It&amp;#8217;s interesting to see that Brienne&amp;#8217;s chapters start out being dull, but appear to get more interesting as the book&amp;nbsp;progresses.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tyrion&lt;/strong&gt; : Goes from having several strong chapters in the previous books to having a weak showing in &lt;code&gt;ADWD&lt;/code&gt;. The drop in the quality of his storyline is particularly jarring considering the strength of his chapters at the end of &lt;code&gt;ASOS&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Theon/Reek&lt;/strong&gt; : One of the few consistently solid &lt;span class="caps"&gt;POV&lt;/span&gt; characters in &lt;code&gt;ADWD&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Chapter rating distributions by&amp;nbsp;book&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Chapter ratings distribution by book - violin" src="http://dvatvani.github.io/static/ASOIAF-Chapter-ratings/Chapter_rating_distributions_by_book_-_violin.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chapter ratings distribution by book - box" src="http://dvatvani.github.io/static/ASOIAF-Chapter-ratings/Chapter_rating_distributions_by_book_-_box.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Book&lt;/th&gt;
&lt;th align="center"&gt;mean&lt;/th&gt;
&lt;th align="center"&gt;std. dev.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;span class="caps"&gt;AGOT&lt;/span&gt;&lt;/td&gt;
&lt;td align="center"&gt;8.21&lt;/td&gt;
&lt;td align="center"&gt;0.56&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;span class="caps"&gt;ACOK&lt;/span&gt;&lt;/td&gt;
&lt;td align="center"&gt;7.75&lt;/td&gt;
&lt;td align="center"&gt;0.70&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;span class="caps"&gt;ASOS&lt;/span&gt;&lt;/td&gt;
&lt;td align="center"&gt;7.99&lt;/td&gt;
&lt;td align="center"&gt;0.63&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;span class="caps"&gt;AFFC&lt;/span&gt;&lt;/td&gt;
&lt;td align="center"&gt;7.55&lt;/td&gt;
&lt;td align="center"&gt;0.52&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;span class="caps"&gt;ADWD&lt;/span&gt;&lt;/td&gt;
&lt;td align="center"&gt;8.03&lt;/td&gt;
&lt;td align="center"&gt;0.69&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;If we rank the books by the average ratings of the chapters in each book, they rank in the order &lt;code&gt;AGOT&lt;/code&gt; &amp;gt; &lt;code&gt;ADWD&lt;/code&gt; ≈ &lt;code&gt;ASOS&lt;/code&gt; &amp;gt; &lt;code&gt;ACOK&lt;/code&gt; &amp;gt; &lt;code&gt;AFFC&lt;/code&gt;. 
The overall book ratings on &lt;a href="https://www.goodreads.com/series/43790-a-song-of-ice-and-fire"&gt;Goodreads&lt;/a&gt;, however, suggest that &lt;code&gt;ASOS&lt;/code&gt; &amp;gt; &lt;code&gt;AGOT&lt;/code&gt; &amp;gt; &lt;code&gt;ACOK&lt;/code&gt; &amp;gt; &lt;code&gt;ADWD&lt;/code&gt; &amp;gt; &lt;code&gt;AFFC&lt;/code&gt;. 
Personally, my views on the quality of the books are more aligned with the Goodreads ratings, but it&amp;#8217;s likely because the overall experience of a book is not well represented by the average of its&amp;nbsp;chapters.&lt;/p&gt;
&lt;h1&gt;Chapter rating distributions by &lt;span class="caps"&gt;POV&lt;/span&gt;&amp;nbsp;character&lt;/h1&gt;
&lt;p&gt;We can also have a look at the distributions of chapter ratings in each book to see which of the &lt;span class="caps"&gt;POV&lt;/span&gt; characters have the better&amp;nbsp;chapters.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chapter ratings distribution by POV - violin" src="http://dvatvani.github.io/static/ASOIAF-Chapter-ratings/Chapter_rating_distributions_by_POV_character_-_violin.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chapter ratings distribution by POV - box" src="http://dvatvani.github.io/static/ASOIAF-Chapter-ratings/Chapter_rating_distributions_by_POV_character_-_box.png" /&gt;&lt;/p&gt;
&lt;p&gt;The distributions are ranked by average chapter rating, with the highest average on the left. The top few &lt;span class="caps"&gt;POV&lt;/span&gt; characters are all characters with a single &lt;span class="caps"&gt;POV&lt;/span&gt; chapter so far. From the characters that have multiple &lt;span class="caps"&gt;POV&lt;/span&gt; chapters, Ned Stark has the most interesting chapters. It goes some way to explain why he&amp;#8217;s such a fan favourite&amp;nbsp;character.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you have any ideas about what might be interesting to do with this dataset, let me know in the comments. The Jupyter notebook that was used to generate all the plots in this blog post can be found &lt;a href="http://nbviewer.jupyter.org/github/dvatvani/dvatvani.github.io/blob/master/static/ASOIAF-Chapter-ratings/ASOIAF_chapter_ratings.ipynb"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</summary><category term="Python"></category><category term="Game of Thrones"></category></entry><entry><title>Solving the 8 Queens problem with python</title><link href="http://dvatvani.github.io/8-Queens.html" rel="alternate"></link><updated>2016-03-28T00:45:00+01:00</updated><author><name>Dinesh Vatvani</name></author><id>tag:dvatvani.github.io,2016-03-28:8-Queens.html</id><summary type="html">&lt;p&gt;This is my approach to solving the 8 Queens puzzle with&amp;nbsp;Python. &lt;/p&gt;
&lt;p&gt;For anyone unfamiliar with the 8 Queens puzzle, it is the problem of placing eight queens on a standard (8x8) chessboard such that no queen is in a position that can attack any other. This post will have the solutions to the puzzle, so if you&amp;#8217;d like to attempt to solve it on your own, now would be a good time to stop reading this&amp;nbsp;post.&lt;/p&gt;
&lt;p&gt;I was first made aware of the existence of this puzzle in a pub one evening with some friends. One of my friends started trying to solve the puzzle manually and found a solution in about 10 minutes. This inspired me to attempt to tackle the problem with Python to see if I would have been able to find a solution faster. I took me around 15 minutes to solve the puzzle using python, but found 92 solutions (there are 12 if you eliminate symmetrically related&amp;nbsp;solutions). &lt;/p&gt;
&lt;p&gt;This original code I wrote to solve the problem looked like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;

&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;How big is your chess board?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_diagonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;point2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;gradient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;gradient&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;gradient&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;list_of_permutations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;permuation&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;permuation&lt;/span&gt;
    &lt;span class="n"&gt;all_permutations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;list_of_permutations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_permutations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;possible_solution&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list_of_permutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;solutions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;piece1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;piece2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;possible_solution&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;solutions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_diagonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;piece1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;piece2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;solutions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;possible_solution&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I&amp;#8217;ve since expanded it to make it easier to understand, abstracting some useful functions and added some code to remove equivalent solutions and help visualise the solutions, but the code above contains the main logic that runs at the heart of the approach I took. The expanded version of the code can be found &lt;a href="http://nbviewer.jupyter.org/github/dvatvani/dvatvani.github.io/blob/master/static/8-Queens/8_Queens_problem.ipynb"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s break it down a little bit to explain what&amp;#8217;s&amp;nbsp;happening. &lt;/p&gt;
&lt;p&gt;We know that no two queens can attack each other. This means that there must be 1 queen per row. Similarly, there must be 1 queen per column. In this approach, we&amp;#8217;re going to take 8 queens, assign them to the rows 1-8 and determine what columns they must each be in in order for the puzzle criteria to be satisfied. Since there are 8 queens and 8 column positions, there are 40,320 (nPr with n=r=8) ways to arrange 8 queens on a chessboard such that there is one queen per row and 1 queen per column. Since we already know what none of the queens will be attacking any other horizontally or vertically, all we need to do is to check each of the 40,320 arrangements to see if any queen is diagonally threatening any other. This takes about a second to run in total (1.06 seconds on my mid-range 5-year-old Desktop computer) for all 40,320 possible queen arrangements and returns 92 solutions that fit the criteria of having no queen attacking any other. Some of these will be symmetrically related. For example, here are 8 solutions from the set of 92 that are related to each other through 90 or 180 degree rotations; or mirror planes (i.e. they are horizontal, vertical or diagonal mirror images of each&amp;nbsp;other).&lt;/p&gt;
&lt;p&gt;&lt;img alt="symmetry_equivalent_solutions_example" src="http://dvatvani.github.io/static/8-Queens/symmetry_equivalent_solutions.png" /&gt;&lt;/p&gt;
&lt;p&gt;When we remove the solutions that are related, we are left with the 12 unique solutions for the 8x8 board case, shown&amp;nbsp;below:&lt;/p&gt;
&lt;p&gt;&lt;img alt="unique_solutions" src="http://dvatvani.github.io/static/8-Queens/unique_solutions.png" /&gt;&lt;/p&gt;
&lt;p&gt;The Jupyter notebook containing the current version of the code is available &lt;a href="http://nbviewer.jupyter.org/github/dvatvani/dvatvani.github.io/blob/master/static/8-Queens/8_Queens_problem.ipynb"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thanks to my&amp;nbsp;friends:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Daniele Tomerini for introducing me to this&amp;nbsp;puzzle&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Hugh Thompson, whose attempts at solving this puzzle manually inspired me to tackle it using&amp;nbsp;python&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="Puzzles"></category></entry></feed>