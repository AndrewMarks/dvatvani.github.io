<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dinesh Vatvani</title><link href="http://dvatvani.github.io/" rel="alternate"></link><link href="http://dvatvani.github.io/feeds/all.atom.xml" rel="self"></link><id>http://dvatvani.github.io/</id><updated>2016-04-10T04:00:00+01:00</updated><entry><title>A Song of Ice and Fire : Chapter ratings</title><link href="http://dvatvani.github.io/ASOIAF-Chapter-ratings.html" rel="alternate"></link><updated>2016-04-10T04:00:00+01:00</updated><author><name>Dinesh Vatvani</name></author><id>tag:dvatvani.github.io,2016-04-10:ASOIAF-Chapter-ratings.html</id><summary type="html">&lt;p&gt;This post relates to Game of Thrones, or more specifically to the series of books the show is based on: A Song of Ice and&amp;nbsp;Fire. &lt;/p&gt;
&lt;p&gt;The website &lt;a href="http://towerofthehand.com/"&gt;Tower of the Hand&lt;/a&gt; contains ratings for each chapter in the series of books. Chapters&amp;#8217; ratings are generated by users. Each chapter has ratings from typically around 150 people so there will still be a reasonable amount of uncertainty around each chapter rating, but there is still enough information in here to give us broad ideas about the overall progression in how interesting the books are, the most interesting books and the most interesting &lt;span class="caps"&gt;POV&lt;/span&gt;&amp;nbsp;characters.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s start by having a quick overview of the progression of chapter ratings across the entire&amp;nbsp;series.&lt;/p&gt;
&lt;h1&gt;Chapter ratings in the entire&amp;nbsp;series&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Chapter ratings in all books" src="http://dvatvani.github.io/static/ASOIAF-Chapter-ratings/ASOIAF_-_all_books_-_chapter_ratings.png" /&gt;&lt;/p&gt;
&lt;p&gt;This overview suggests&amp;nbsp;that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Game of Thrones is fairly consistent in its chapter&amp;nbsp;ratings&lt;/li&gt;
&lt;li&gt;The final quarter of A Clash of Kings is comparatively&amp;nbsp;dull&lt;/li&gt;
&lt;li&gt;A Storm of Swords gets better as the book&amp;nbsp;progresses&lt;/li&gt;
&lt;li&gt;A Feast for Crows is less not as good as other books, but gets better as the book&amp;nbsp;progresses&lt;/li&gt;
&lt;li&gt;A Dance with Dragons is the most inconsistent in terms of chapter&amp;nbsp;ratings&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Having read the books, I&amp;#8217;m inclined to agree with the overview provided by the ratings so&amp;nbsp;far.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s break the chapters down by book to have a slightly closer look at the&amp;nbsp;ratings. &lt;/p&gt;
&lt;h1&gt;Chapter ratings by&amp;nbsp;book&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Chapter ratings in AGOT" src="http://dvatvani.github.io/static/ASOIAF-Chapter-ratings/ASOIAF_-_AGOT_-_chapter_ratings.png" /&gt;
&lt;img alt="Chapter ratings in ACOK" src="http://dvatvani.github.io/static/ASOIAF-Chapter-ratings/ASOIAF_-_ACOK_-_chapter_ratings.png" /&gt;
&lt;img alt="Chapter ratings in ASOS" src="http://dvatvani.github.io/static/ASOIAF-Chapter-ratings/ASOIAF_-_ASOS_-_chapter_ratings.png" /&gt;
&lt;img alt="Chapter ratings in AFFC" src="http://dvatvani.github.io/static/ASOIAF-Chapter-ratings/ASOIAF_-_AFFC_-_chapter_ratings.png" /&gt;
&lt;img alt="Chapter ratings in ADWD" src="http://dvatvani.github.io/static/ASOIAF-Chapter-ratings/ASOIAF_-_ADWD_-_chapter_ratings.png" /&gt;&lt;/p&gt;
&lt;h1&gt;Chapter ratings by &lt;span class="caps"&gt;POV&lt;/span&gt;&amp;nbsp;character&lt;/h1&gt;
&lt;p&gt;It can be interesting to break down the chapter ratings by the point of view characters to see how the various plotlines progress in terms of maintaining reader&amp;nbsp;interest.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chapter ratings by POV character" src="http://dvatvani.github.io/static/ASOIAF-Chapter-ratings/Chapter_ratings_by_POV_character_-_all_books.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Daenerys : With the exception of one strong chapter, the final book is a bad for&amp;nbsp;Daenerys&lt;/li&gt;
&lt;li&gt;Ned : As we all know, he was a short lived character, but his chapters were consistently&amp;nbsp;great&lt;/li&gt;
&lt;li&gt;Brienne : Many people complain about Brienne&amp;#8217;s chapter&amp;#8217;s in &lt;code&gt;AFFC&lt;/code&gt;. It&amp;#8217;s interesting to see that Brienne&amp;#8217;s chapters start out being dull, but appear to get more interesting and the book&amp;nbsp;progresses.&lt;/li&gt;
&lt;li&gt;Tyrion : Goes from having several strong chapters in previous book to having a weak showing in &lt;code&gt;ADWD&lt;/code&gt;. The drop in the quality of his storyline is particularly jarring considering the strength of his chapters at the end of &lt;code&gt;ASOS&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Theon/Reek : One of the few consistently solid &lt;span class="caps"&gt;POV&lt;/span&gt; characters in &lt;code&gt;ADWD&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Chapter rating distributions by&amp;nbsp;book&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Chapter ratings distribution by book - violin" src="http://dvatvani.github.io/static/ASOIAF-Chapter-ratings/Chapter_rating_distributions_by_book_-_violin.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chapter ratings distribution by book - box" src="http://dvatvani.github.io/static/ASOIAF-Chapter-ratings/Chapter_rating_distributions_by_book_-_box.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Book&lt;/th&gt;
&lt;th align="center"&gt;mean&lt;/th&gt;
&lt;th align="center"&gt;std. dev.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;span class="caps"&gt;AGOT&lt;/span&gt;&lt;/td&gt;
&lt;td align="center"&gt;8.21&lt;/td&gt;
&lt;td align="center"&gt;0.56&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;span class="caps"&gt;ACOK&lt;/span&gt;&lt;/td&gt;
&lt;td align="center"&gt;7.75&lt;/td&gt;
&lt;td align="center"&gt;0.70&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;span class="caps"&gt;ASOS&lt;/span&gt;&lt;/td&gt;
&lt;td align="center"&gt;7.99&lt;/td&gt;
&lt;td align="center"&gt;0.63&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;span class="caps"&gt;AFFC&lt;/span&gt;&lt;/td&gt;
&lt;td align="center"&gt;7.55&lt;/td&gt;
&lt;td align="center"&gt;0.52&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;span class="caps"&gt;ADWD&lt;/span&gt;&lt;/td&gt;
&lt;td align="center"&gt;8.03&lt;/td&gt;
&lt;td align="center"&gt;0.69&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;If we rank the books by the average ratings of the chapters in each book, they rank in the order &lt;code&gt;AGOT&lt;/code&gt; &amp;gt; &lt;code&gt;ADWD&lt;/code&gt; ≈ &lt;code&gt;ASOS&lt;/code&gt; &amp;gt; &lt;code&gt;ACOK&lt;/code&gt; &amp;gt; &lt;code&gt;AFFC&lt;/code&gt;. The overall book ratings on &lt;a href="https://www.goodreads.com/series/43790-a-song-of-ice-and-fire"&gt;Goodreads&lt;/a&gt;, however, suggest that &lt;code&gt;ASOS&lt;/code&gt; &amp;gt; &lt;code&gt;AGOT&lt;/code&gt; &amp;gt; &lt;code&gt;ACOK&lt;/code&gt; &amp;gt; &lt;code&gt;ADWD&lt;/code&gt; &amp;gt; &lt;code&gt;AFFC&lt;/code&gt;. Personally, my views on the quality of the books are more aligned with the Goodreads ratings, but it&amp;#8217;s likely because the overall experience of a book is not well represented by the average of its&amp;nbsp;chapters.&lt;/p&gt;
&lt;h1&gt;Chapter rating distributions by &lt;span class="caps"&gt;POV&lt;/span&gt;&amp;nbsp;character&lt;/h1&gt;
&lt;p&gt;We can also have a look at the distributions of chapter ratings in each book to see which of the &lt;span class="caps"&gt;POV&lt;/span&gt; characters have the better&amp;nbsp;chapters.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chapter ratings distribution by POV - violin" src="http://dvatvani.github.io/static/ASOIAF-Chapter-ratings/Chapter_rating_distributions_by_POV_character_-_violin.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chapter ratings distribution by POV - box" src="http://dvatvani.github.io/static/ASOIAF-Chapter-ratings/Chapter_rating_distributions_by_POV_character_-_box.png" /&gt;&lt;/p&gt;
&lt;p&gt;The distributions are ranked by average chapter rating, with the highest average on the left. The top few &lt;span class="caps"&gt;POV&lt;/span&gt; characters are all characters with a single &lt;span class="caps"&gt;POV&lt;/span&gt; chapter so far. From the characters that have multiple &lt;span class="caps"&gt;POV&lt;/span&gt; chapters, Ned Stark has the most interesting chapters. It goes some way to explain why he&amp;#8217;s such a fan favourite&amp;nbsp;character.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you have any ideas about what might be interesting to do with this dataset, let me know in the comments. A Jupyter notebook that generated all the plots in this blog post can be found &lt;a href="http://nbviewer.jupyter.org/github/dvatvani/dvatvani.github.io/blob/master/static/ASOIAF-Chapter-ratings/ASOIAF_chapter_ratings.ipynb"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</summary><category term="Python"></category><category term="Game of Thrones"></category></entry><entry><title>Solving the 8 Queens problem with python</title><link href="http://dvatvani.github.io/8-Queens.html" rel="alternate"></link><updated>2016-03-28T00:45:00+01:00</updated><author><name>Dinesh Vatvani</name></author><id>tag:dvatvani.github.io,2016-03-28:8-Queens.html</id><summary type="html">&lt;p&gt;This is my approach to solving the 8 Queens puzzle with&amp;nbsp;Python. &lt;/p&gt;
&lt;p&gt;For anyone unfamiliar with the 8 Queens puzzle, it is the problem of placing eight queens on a standard (8x8) chessboard such that no queen is in a position that can attack any other. This post will have the solutions to the puzzle, so if you&amp;#8217;d like to attempt to solve it on your own, now would be a good time to stop reading this&amp;nbsp;post.&lt;/p&gt;
&lt;p&gt;I was first made aware of the existence of this puzzle in a pub one evening with some friends. One of my friends started trying to solve the puzzle manually and found a solution in about 10 minutes. This inspired me to attempt to tackle the problem with Python to see if I would have been able to find a solution faster. I took me around 15 minutes to solve the puzzle using python, but found 92 solutions (there are 12 if you eliminate symmetrically related&amp;nbsp;solutions). &lt;/p&gt;
&lt;p&gt;This original code I wrote to solve the problem looked like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;

&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;How big is your chess board?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_diagonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;point2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;gradient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;gradient&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;gradient&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;list_of_permutations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;permuation&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;permuation&lt;/span&gt;
    &lt;span class="n"&gt;all_permutations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;list_of_permutations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_permutations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;possible_solution&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list_of_permutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;solutions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;piece1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;piece2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;possible_solution&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;solutions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_diagonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;piece1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;piece2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;solutions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;possible_solution&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I&amp;#8217;ve since expanded it to make it easier to understand, abstracting some useful functions and added some code to remove equivalent solutions and help visualise the solutions, but the code above contains the main logic that runs at the heart of the approach I took. The expanded version of the code can be found &lt;a href="http://nbviewer.jupyter.org/github/dvatvani/dvatvani.github.io/blob/master/static/8-Queens/8_Queens_problem.ipynb"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s break it down a little bit to explain what&amp;#8217;s&amp;nbsp;happening. &lt;/p&gt;
&lt;p&gt;We know that no two queens can attack each other. This means that there must be 1 queen per row. Similarly, there must be 1 queen per column. In this approach, we&amp;#8217;re going to take 8 queens, assign them to the rows 1-8 and determine what columns they must each be in in order for the puzzle criteria to be satisfied. Since there are 8 queens and 8 column positions, there are 40,320 (nPr with n=r=8) ways to arrange 8 queens on a chessboard such that there is one queen per row and 1 queen per column. Since we already know what none of the queens will be attacking any other horizontally or vertically, all we need to do is to check each of the 40,320 arrangements to see if any queen is diagonally threatening any other. This takes about a second to run in total (1.06 seconds on my mid-range 5-year-old Desktop computer) for all 40,320 possible queen arrangements and returns 92 solutions that fit the criteria of having no queen attacking any other. Some of these will be symmetrically related. For example, here are 8 solutions from the set of 92 that are related to each other through 90 or 180 degree rotations; or mirror planes (i.e. they are horizontal, vertical or diagonal mirror images of each&amp;nbsp;other).&lt;/p&gt;
&lt;p&gt;&lt;img alt="symmetry_equivalent_solutions_example" src="http://dvatvani.github.io/static/8-Queens/symmetry_equivalent_solutions.png" /&gt;&lt;/p&gt;
&lt;p&gt;When we remove the solutions that are related, we are left with the 12 unique solutions for the 8x8 board case, shown&amp;nbsp;below:&lt;/p&gt;
&lt;p&gt;&lt;img alt="unique_solutions" src="http://dvatvani.github.io/static/8-Queens/unique_solutions.png" /&gt;&lt;/p&gt;
&lt;p&gt;The Jupyter notebook containing the current version of the code is available &lt;a href="http://nbviewer.jupyter.org/github/dvatvani/dvatvani.github.io/blob/master/static/8-Queens/8_Queens_problem.ipynb"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thanks to my&amp;nbsp;friends:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Daniele Tomerini for introducing me to this&amp;nbsp;puzzle&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Hugh Thompson, whose attempts at solving this puzzle manually inspired me to tackle it using&amp;nbsp;python&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="Puzzles"></category></entry></feed>